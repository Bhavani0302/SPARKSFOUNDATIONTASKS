#predict percentage based on student study hours
import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
url="https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv"
dataset = pd.read_csv(url)
print(dataset.head())
#first five cols
#for 10 dataset.head(10)
print(dataset.tail())
#lastfive
print(dataset.shape)
print(dataset.info())
print(dataset.isnull().sum())
#Visualize Data
#as per dataset
dataset.plot(x="Hours",y="Scores",color="red",style="*")
plt.xlabel("Hours Studied")
plt.ylabel("Percentage")
plt.title('Hours Vs Percentage')
plt.show()
print(dataset.corr()0
#correlation means relationship between attributes.here it is 0.9 then occurence of outliers is low
x = dataset.iloc[:,:-1].values
#all rows and cols except last
y = dataset.iloc[:,1].values
#all rows of 1st col ie scores
print(x)
print(y)
#split the test data and train data
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)
print(x_train)
print(x_test)
print(y_train)
print(y_test)
#here 80% train data 20% test data
#Training Algorithm
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x_train,y_train)
#fiitting x,y training data to x,y axis
#Visualizing Data
#y=mx+c
line = model.coef_*x+model.intercept_
#traning data with model developed
plt.scatter(x_train,y_train,color="red")
plt.plot(x,line,color='green')
plt.title('Training Data for Hrs Vs %')
plt.xlabel("HoursStudied")
plt.ylabel("Percentage")
plt.show()
#test data with model developed
plt.scatter(x_test,y_test,color="red")
plt.plot(x,line,color='green')
plt.title('Test Data for Hrs Vs %')
plt.xlabel("HoursStudied")
plt.ylabel("Percentage")
plt.show()
#makingprediction
#to model we are giving x_test for prediction and storing values in y_p
y_predictedValue = model.predict(x_test)
print(y_predictedValue)
print(y_test)
#compare y_p and y_t. 
#values are nearby
#making prediction for our value lets take 9.25
hours = 9.25
predicted_value = model.predict([[hours]])
print(predicted_value)
